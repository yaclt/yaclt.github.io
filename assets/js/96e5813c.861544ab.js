"use strict";(self.webpackChunkyaclt=self.webpackChunkyaclt||[]).push([[158],{2061:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return d},metadata:function(){return m},toc:function(){return p},default:function(){return u}});var n=a(7462),l=a(3366),r=(a(7294),a(3905)),i=["components"],o={sidebar_position:3},d="Handlebars",m={unversionedId:"yaclt/handlebars-templates",id:"yaclt/handlebars-templates",isDocsHomePage:!1,title:"Handlebars",description:"Helpers",source:"@site/docs/yaclt/handlebars-templates.md",sourceDirName:"yaclt",slug:"/yaclt/handlebars-templates",permalink:"/docs/yaclt/handlebars-templates",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/yaclt/handlebars-templates.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Commands",permalink:"/docs/yaclt/commands"},next:{title:"Common Configuration Recipes",permalink:"/docs/yaclt/common-configuration-recipes"}},p=[{value:"Helpers",id:"helpers",children:[{value:"<code>currentDateTime</code>",id:"currentdatetime",children:[]},{value:"<code>capitalize</code>",id:"capitalize",children:[]},{value:"<code>echo</code>",id:"echo",children:[]}]},{value:"Variables",id:"variables",children:[{value:"Individual Changelog Entry Template",id:"individual-changelog-entry-template",children:[]},{value:"Global Changelog Template",id:"global-changelog-template",children:[]},{value:"Release Branch Pattern",id:"release-branch-pattern",children:[]}]}],s={toc:p};function u(e){var t=e.components,a=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"handlebars"},"Handlebars"),(0,r.kt)("h2",{id:"helpers"},"Helpers"),(0,r.kt)("h3",{id:"currentdatetime"},(0,r.kt)("inlineCode",{parentName:"h3"},"currentDateTime")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"currentDateTime")," outputs a timestamp given a format parameter. There are a few special\nformat values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ISODate")," => ",(0,r.kt)("inlineCode",{parentName:"li"},"DateTime.now().toISODate()")," (this is also the default)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ISO")," => ",(0,r.kt)("inlineCode",{parentName:"li"},"DateTime.now().toISO()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"localeString")," => ",(0,r.kt)("inlineCode",{parentName:"li"},"DateTime.now().toLocaleString()")),(0,r.kt)("li",{parentName:"ul"},"Any other string will be passed like ",(0,r.kt)("inlineCode",{parentName:"li"},"DateTime.now().toFormat(string)"))),(0,r.kt)("p",null,"For more information on formatting with the ",(0,r.kt)("inlineCode",{parentName:"p"},"currentDateTime")," helper, see ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/moment/luxon/blob/master/docs/formatting.md"},"Luxon's formatting documentation"),"."),(0,r.kt)("h3",{id:"capitalize"},(0,r.kt)("inlineCode",{parentName:"h3"},"capitalize")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"capitalize")," takes a string and makes the first letter capitalized, and the rest lower case."),(0,r.kt)("h3",{id:"echo"},(0,r.kt)("inlineCode",{parentName:"h3"},"echo")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"echo")," takes a string and simply returns it. This is useful if you want to use literal ",(0,r.kt)("inlineCode",{parentName:"p"},"{")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"}")," characters in your template, like the default templates do."),(0,r.kt)("h2",{id:"variables"},"Variables"),(0,r.kt)("h3",{id:"individual-changelog-entry-template"},"Individual Changelog Entry Template"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"changeType")),(0,r.kt)("td",{parentName:"tr",align:null},"The change type for the entry, e.g. ",(0,r.kt)("inlineCode",{parentName:"td"},"NEW"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"IMPROVED"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"FIXED"),", or custom ones you've configured."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"message")),(0,r.kt)("td",{parentName:"tr",align:null},"The change log entry message."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"issueId")),(0,r.kt)("td",{parentName:"tr",align:null},"The issue ID. This is optional based on your config."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")," if ",(0,r.kt)("inlineCode",{parentName:"td"},"--requireIssueIds")," is ",(0,r.kt)("inlineCode",{parentName:"td"},"false"))))),(0,r.kt)("h3",{id:"global-changelog-template"},"Global Changelog Template"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"releaseNumber")),(0,r.kt)("td",{parentName:"tr",align:null},"The release number or label, specified by ",(0,r.kt)("inlineCode",{parentName:"td"},"--releaseNumber")," flag or from configuration file."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"entryGroups")),(0,r.kt)("td",{parentName:"tr",align:null},"An array of objects with the interface ",(0,r.kt)("inlineCode",{parentName:"td"},"{ label: string; items: string[]; }")," where ",(0,r.kt)("inlineCode",{parentName:"td"},"label")," is the change type and ",(0,r.kt)("inlineCode",{parentName:"td"},"items")," is all the entries with that change type. Will only be passed if your format template uses change type tags."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")," if using change type tags")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"entries")),(0,r.kt)("td",{parentName:"tr",align:null},"An array of strings which are the individual changelog entries. This will be used if your format template does not use change type tags."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")," if not using change type tags")))),(0,r.kt)("h3",{id:"release-branch-pattern"},"Release Branch Pattern"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"releaseNumber")),(0,r.kt)("td",{parentName:"tr",align:null},"The release number or label, specified by ",(0,r.kt)("inlineCode",{parentName:"td"},"--releaseNumber")," flag or from configuration file"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true"))))))}u.isMDXComponent=!0}}]);