"use strict";(self.webpackChunkyaclt=self.webpackChunkyaclt||[]).push([[874],{2960:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var a=r(7462),t=r(3366),o=(r(7294),r(3905)),c=["components"],i={sidebar_position:4},s="Common Configuration Recipes",l={unversionedId:"yaclt/common-configuration-recipes",id:"yaclt/common-configuration-recipes",isDocsHomePage:!1,title:"Common Configuration Recipes",description:"Require a changelog be added for a branch",source:"@site/docs/yaclt/common-configuration-recipes.md",sourceDirName:"yaclt",slug:"/yaclt/common-configuration-recipes",permalink:"/docs/yaclt/common-configuration-recipes",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/yaclt/common-configuration-recipes.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Handlebars",permalink:"/docs/yaclt/handlebars-templates"}},u=[{value:"Require a changelog be added for a branch",id:"require-a-changelog-be-added-for-a-branch",children:[]},{value:"Use <code>package.json</code> version as release number",id:"use-packagejson-version-as-release-number",children:[]},{value:"Require work tree be clean before preparing a release",id:"require-work-tree-be-clean-before-preparing-a-release",children:[]},{value:"Require releases be prepared from the default branch",id:"require-releases-be-prepared-from-the-default-branch",children:[]}],d={toc:u};function p(e){var n=e.components,r=(0,t.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"common-configuration-recipes"},"Common Configuration Recipes"),(0,o.kt)("h2",{id:"require-a-changelog-be-added-for-a-branch"},"Require a changelog be added for a branch"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const execSync = require("child_process").execSync;\n\nconst getDefaultBranch = () => execSync(\n  "git remote show origin | awk \'/HEAD branch/ {print $NF}\'"\n)\n  .toString()\n  .replace(/\\n/g, "")\n  .trim();\n\nconst allChangedFiles = () => {\n  const defaultBranch = getDefaultBranch();\n  execSync(`git fetch origin ${defaultBranch}`);\n  const currentRevision = execSync("git rev-parse HEAD").toString().replace(/\\n/g, "");\n  return execSync(\n    `git --no-pager diff --name-only origin/${defaultBranch} ${currentRevision}`\n  )\n    .toString()\n    .split("\\n")\n    .map((filename) => filename.trim())\n    .filter(Boolean); // filter empty strings\n};\n\nmodule.exports = {\n  preValidate: () => {\n    const changedFiles = allChangedFiles();\n    if (changedFiles.length > 0 && !changedFiles.some((filename) => filename.startsWith("changelogs/"))) {\n      console.error(\n        "No changelog has been added for the current change set. Create a new changelog entry for this change set."\n      );\n      return false;\n    }\n  }\n}\n')),(0,o.kt)("h2",{id:"use-packagejson-version-as-release-number"},"Use ",(0,o.kt)("inlineCode",{parentName:"h2"},"package.json")," version as release number"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'module.exports = {\n  releaseNumber: () => require("./package.json").version\n}\n')),(0,o.kt)("h2",{id:"require-work-tree-be-clean-before-preparing-a-release"},"Require work tree be clean before preparing a release"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const execSync = require("child_process").execSync;\n\nmodule.exports = {\n  prePrepare: () => {\n    // if work tree is not clean, can\'t prepare a release\n    if (execSync("git diff --stat").toString().replace(/\\n/g, "").trim()) {\n      console.error(\n        "Work tree is not clean. Releases can only be prepared from a clean work tree."\n      );\n      return false;\n    }\n  }\n}\n')),(0,o.kt)("h2",{id:"require-releases-be-prepared-from-the-default-branch"},"Require releases be prepared from the default branch"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const execSync = require("child_process").execSync;\n\nconst getDefaultBranch = () =>\n  execSync("git remote show origin | awk \'/HEAD branch/ {print $NF}\'")\n    .toString()\n    .replace(/\\n/g, "")\n    .trim();\n\nconst getCurrentBranch = () =>\n  execSync("git branch --show-current").toString().replace(/\\n/g, "").trim();\n\nmodule.exports = {\n  prePrepare: () => {\n    const defaultBranch = getDefaultBranch();\n    if (defaultBranch !== getCurrentBranch()) {\n      console.error(\n        `Releases can only be prepared from ${defaultBranch}! There should be no changes from ${defaultBranch} before preparing the changelog.`\n      );\n      return false;\n    }\n  }\n}\n')))}p.isMDXComponent=!0}}]);