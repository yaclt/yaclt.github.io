"use strict";(self.webpackChunkyaclt=self.webpackChunkyaclt||[]).push([[245],{811:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return r},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return m},default:function(){return p}});var n=a(7462),i=a(3366),l=(a(7294),a(3905)),o=["components"],r={sidebar_position:1,title:"Yaclt"},s=void 0,c={unversionedId:"yaclt/intro",id:"yaclt/intro",isDocsHomePage:!1,title:"Yaclt",description:"Yaclt is Yet Another Change Log Tool",source:"@site/docs/yaclt/intro.md",sourceDirName:"yaclt",slug:"/yaclt/intro",permalink:"/docs/yaclt/intro",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/yaclt/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Yaclt"},sidebar:"tutorialSidebar",previous:{title:"yaclt.nvim",permalink:"/docs/yaclt.nvim/intro"},next:{title:"Commands",permalink:"/docs/yaclt/commands"}},m=[{value:"Features",id:"features",children:[]},{value:"Configuration",id:"configuration",children:[]}],u={toc:m};function p(e){var t=e.components,a=(0,i.Z)(e,o);return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("img",{src:"https://github.com/mrjones2014/yaclt/raw/master/images/logo_color_on_transparent.png",alt:"yaclt logo",height:"150",align:"right"}),(0,l.kt)("p",null,"Yaclt is ",(0,l.kt)("ins",null,"Y"),"et ",(0,l.kt)("ins",null,"A"),"nother ",(0,l.kt)("ins",null,"C"),"hange ",(0,l.kt)("ins",null,"L"),"og ",(0,l.kt)("ins",null,"T"),"ool"),(0,l.kt)("p",null,"Friends don't let friends use git commit messages as change log entries; they should be more thoughtfully written."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"yaclt")," is a highly configurable, file-based change log generator and validator. Include a change log entry file generated by ",(0,l.kt)("inlineCode",{parentName:"p"},"yaclt")," in each Pull Request,\nthen use ",(0,l.kt)("inlineCode",{parentName:"p"},"yaclt")," again to gather each individual entry into ",(0,l.kt)("inlineCode",{parentName:"p"},"CHANGELOG.md")," as part of your release process."),(0,l.kt)("img",{src:"https://raw.githubusercontent.com/yaclt/yaclt/master/images/yaclt-new-demo.gif",alt:"yaclt demo gif"}),(0,l.kt)("h2",{id:"features"},"Features"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Customize the format of individual entries and ",(0,l.kt)("inlineCode",{parentName:"li"},"CHANGELOG.md")," using ",(0,l.kt)("a",{parentName:"li",href:"https://handlebarsjs.com"},"Handlebars")),(0,l.kt)("li",{parentName:"ul"},"Add your own extra user-defined validations using pre- and post-command hooks"),(0,l.kt)("li",{parentName:"ul"},"Validate that all change log entries match a specified format (e.g. for use in CI pipelines)"),(0,l.kt)("li",{parentName:"ul"},"Automatically parse issue numbers from branch names"),(0,l.kt)("li",{parentName:"ul"},"Automatically checkout a new branch for generating release notes (branch name customizable with Handlebars)"),(0,l.kt)("li",{parentName:"ul"},"Neovim plugin (",(0,l.kt)("a",{parentName:"li",href:"https://github.com/yaclt/yaclt.nvim"},(0,l.kt)("inlineCode",{parentName:"a"},"yaclt.nvim")),")"),(0,l.kt)("li",{parentName:"ul"},"And more")),(0,l.kt)("h2",{id:"configuration"},"Configuration"),(0,l.kt)("p",null,"All command line flags and arguments can be specified in a configuration file. Most likely you will want most of your options to be specified in a configuration file.\nSupported file names are:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"yacltrc.yml")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".yacltrc.yml")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"yacltrc.yaml")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".yacltrc.yaml")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"yacltrc.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".yacltrc.json")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"yacltrc.js")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},".yacltrc.js"))),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},".js")," config must use CommonJS format, e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"module.exports ="),". Options passed\non the command line will override options from the configuration file if present."),(0,l.kt)("p",null,"If the working directory is inside a git repository, the tree will be traversed to the git root, using the first valid configuration file that is found. If no configuration file is found in the repo,\nit will also check, in order of precedence, ",(0,l.kt)("inlineCode",{parentName:"p"},"$YACLT_CONFIG_HOME/"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"$XDG_CONFIG_HOME/yaclt/"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"$HOME/.config/yaclt/")," for global configuration files."),(0,l.kt)("p",null,"If you are using a Javascript configuration file (e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"yacltrc.js"),"), any of the options can be a parameterless function which returns a value of the same type expected by the option. This can be useful,\nfor example, if you'd like to write some custom logic to parse the next release number based on git tags, or generate your messages automatically from git commit messages."),(0,l.kt)("p",null,"For options which are Handlebars templates (e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"--format"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"--releaseBranchPattern"),", or ",(0,l.kt)("inlineCode",{parentName:"p"},"--changelogTemplate"),"), you may specify a filepath instead of a literal template string.\nThe CLI will check if the argument is a filepath to a file that exists, and if so, read the template from that file."))}p.isMDXComponent=!0}}]);