"use strict";(self.webpackChunkyaclt=self.webpackChunkyaclt||[]).push([[851],{2941:function(e,a,t){t.r(a),t.d(a,{frontMatter:function(){return c},contentTitle:function(){return o},metadata:function(){return u},toc:function(){return m},default:function(){return p}});var n=t(7462),l=t(3366),i=(t(7294),t(3905)),r=["components"],c={},o="yaclt.nvim",u={unversionedId:"yaclt.nvim/intro",id:"yaclt.nvim/intro",isDocsHomePage:!1,title:"yaclt.nvim",description:"A Neovim plugin for Yaclt.",source:"@site/docs/yaclt.nvim/intro.md",sourceDirName:"yaclt.nvim",slug:"/yaclt.nvim/intro",permalink:"/docs/yaclt.nvim/intro",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/yaclt.nvim/intro.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",next:{title:"Yaclt",permalink:"/docs/yaclt/intro"}},m=[{value:"Installation",id:"installation",children:[{value:"Packer",id:"packer",children:[]},{value:"Vim Plug",id:"vim-plug",children:[]}]},{value:"Configuration",id:"configuration",children:[]},{value:"API",id:"api",children:[{value:"Lua",id:"lua",children:[]},{value:"Nvim Command",id:"nvim-command",children:[]}]}],s={toc:m};function p(e){var a=e.components,t=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,n.Z)({},s,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"yacltnvim"},"yaclt.nvim"),(0,i.kt)("p",null,"A Neovim plugin for ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/yaclt/yaclt"},"Yaclt"),"."),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("h3",{id:"packer"},"Packer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"use {'yaclt/yaclt.nvim', requires = 'nvim-lua/plenary.nvim'}\n")),(0,i.kt)("h3",{id:"vim-plug"},"Vim Plug"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-VimL"},"Plug 'nvim-lua/plenary.nvim'\nPlug 'yaclt/yaclt.nvim'\n")),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"Configure the plugin by using the setup function. Not required if you want to use a globally installed\n",(0,i.kt)("inlineCode",{parentName:"p"},"yaclt")," without default arguments."),(0,i.kt)("p",null,"Defaults:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"require('yaclt').setup({\n  cmd = 'yaclt', -- can also change this to ./node_modules/.bin/yaclt to use a version from package.json\n  args = {}, -- you can specify default args here that will be passed to yaclt, e.g. { '--changeType', 'NEW' }\n})\n")),(0,i.kt)("h2",{id:"api"},"API"),(0,i.kt)("p",null,"For ",(0,i.kt)("inlineCode",{parentName:"p"},"yaclt")," command arguments and documentation, see ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/yaclt/yaclt/blob/master/docs/COMMANDS.md"},"Yaclt docs"),"."),(0,i.kt)("h3",{id:"lua"},"Lua"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"require('yaclt').new(args) -- e.g. require('yaclt').new({ '--changeType', 'NEW', '-m', 'Message here' })\n\nrequire('yaclt').validate(args)\n\nrequire('yaclt').prepareRelease(args) -- e.g. require('yaclt').prepareRelease({ '--releaseNumber', '0.5.0' })\n")),(0,i.kt)("h3",{id:"nvim-command"},"Nvim Command"),(0,i.kt)("p",null,"There is a single editor command, ",(0,i.kt)("inlineCode",{parentName:"p"},"Yaclt"),", that has the same interface as the CLI. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-VimL"},':Yaclt new --changeType NEW -m "Description of some new change"\n\n:Yaclt validate\n\n:Yaclt prepare-release --releaseNumber 1.2.3\n')))}p.isMDXComponent=!0}}]);